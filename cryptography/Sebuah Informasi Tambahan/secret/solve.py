from z3 import *
from Crypto.Util.number import *

value_dict = {0 : 5, 1 : 6, 2 : 7, 3 : 8, 4 : 9}
number_dict = {v: k for k, v in value_dict.items()}

def rot_1(val):
    return value_dict.get(val, val)

def rot_2(val):
    return number_dict.get(val, val)

n, e, ct1, ct2 = [123356349643587865828834808037484927479523253436005139721667145992814277507284446278960324619842785513991084183393277074640548776116832040510220729647760727249476994373549232256775292885382921356411487582257526818057871560815787696766927706376343648584423677085409805637784838049232444716549846100470547608663, 65537, 32826776362908893210595248424590726232667125464343243314460786923109554528445953082928821349039550386805923377803275210957092530299400849776101295473621778801594672327074244314047769002462354670163114506436509777132432531478584377739558811574935828296433322743317554002011703628874699727411533001348870868787, 60761233442846655647344637274809711819389634060476946943783128370869997098692886386083838098831019301084935648034632275623213275198898382320539265720123094118640854613230954309492564405894965390339910175009905822969453544426062870471674419526469669673025550186060405438440169656715425420913613017002574586410809718130641081052664618650400671450648286361759445840759840209351666580331840901948867233010375454230228607806421374888539676772055770559848509095524763186072757535774721674931357895064164907927885197084815762477780799184372398767630138636352223838054799532288291889855059579063848299514675016185262429036756]

ct2 = str(ct2)
test = ""

for data in ct2:
    if (int(data) <= 4): test += str(rot_1(int(data)))
    if (int(data) >= 5): test += str(rot_2(int(data)))

ext = int(test)

p = Int('p')
q = Int('q')
s = Solver()
s.add(p * q == n)
s.add(((n ** 2)+((p  * 2)+ (q * 2))) == ext)
print(s.check())
print(s.model())
p = 10805102821014420561743779404098238228386627041283977993793565592796206623042651072555098461314710263097048756232971945575073222644257711995858039711001757
q = 11416490123877113045762675797037088643831217908997547503098803969518567512678523910878155334272840645099086617784883872746337490285470463994648085379965059

phi = (p - 1) * (q - 1)
d = inverse(e, phi)
pt = pow(ct1, d, n)
print(long_to_bytes(pt).decode())